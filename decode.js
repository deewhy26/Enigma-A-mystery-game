
class HuffmanNode
{
	constructor()
	{
		this.data = 0;
		this.c = '';
		this.left = this.right = null;
	}
}
var resE = "";
var resD = ""; 
// recursive function to print the
	// huffman-code through the tree traversal.
	// Here s is the huffman - code generated.
	function printCode(root,s, p)
	{
		// base case; if the left and right are null
		// then its a leaf node and we print
		// the code s generated by traversing the tree.
		if (root.left == null
			&& root.right == null
			&& root.c != '-'){
			// && (root.c).toLowerCase() != (root.c).toUpperCase()) {
			// c is the character in the node
			if (root.c == p){
			resE += s; 
			} 
			
			return;
		}

		// if we go to left then add "0" to the code.
		// if we go to the right add"1" to the code.

		// recursive calls for left and
		// right sub-tree of the generated tree.
		printCode(root.left, s + "0", p);
		printCode(root.right, s + "1", p);
	}

	function printChar(root, str, i){
		
		if (root.left == null && root.right == null){  
			resD += root.c; 
			printChar(rootmain, str, i);
			return;
		} 
		if (i == str.length){ 
			return;
		}
		else if (str.charAt(i) == "1"){ 
			i += 1; 
			printChar(root.right, str, i);
		}
		else if (str.charAt(i) == "0"){ 
			i += 1; 
			printChar(root.left, str, i);
		}
	}
	
// main function
// number of characters.
		let n = 27;



		let charArray = ['o','h', 'a', 'r','t','c','e','s', 'i', 'n', '4', 'g', 'm', '2', 'k', 'y', 'd', 'l', '1', '5', '7', '8', ':', 'b', 'w', 'p', 'u' ];
		let charfreq = [8, 8, 7, 7, 7, 7, 6, 6,5,4,3,3,2,2,2,2,2,1,1,1,1,2,1,1,1,1];

		// creating a priority queue q.
		// makes a min-priority queue(min-heap).
		let q = [];

		for (let i = 0; i < n; i++) {

			// creating a Huffman node object
			// and add it to the priority queue.
			let hn = new HuffmanNode();

			hn.c = charArray[i];
			hn.data = charfreq[i];

			hn.left = null;
			hn.right = null;

			// add functions adds
			// the huffman node to the queue.
			q.push(hn);
		}

		// create a root node
		let root = null;
		q.sort(function(a,b){return a.data-b.data;});
		
		// Here we will extract the two minimum value
		// from the heap each time until
		// its size reduces to 1, extract until
		// all the nodes are extracted.
		while (q.length > 1) {

			// first min extract.
			let x = q[0];
			q.shift();

			// second min extract.
			let y = q[0];
			q.shift();

			// new node f which is equal
			let f = new HuffmanNode();

			// to the sum of the frequency of the two nodes
			// assigning values to the f node.
			f.data = x.data + y.data;
			f.c = '-';

			// first extracted node as left child.
			f.left = x;

			// second extracted node as the right child.
			f.right = y;

			// marking the f node as the root node.
			root = f;

			// add this node to the priority-queue.
			q.push(f);
			q.sort(function(a,b){return a.data-b.data;});
		}

		// print the codes by traversing the tree
		// printCode(root, "");


function convert() {
  	let x = document.forms["encoding"]["enc"].value;
//   let slide = document.querySelector(".active");
	
	for (var i = 0; i < x.length; i += 1){ 
		var p = x.charAt(i);
		printCode(root, "", p);
	}
	alert(resE);
	resE = "";
  }
const answers = ["2","12:44","keyboard ","short","washingtondc","metaphor","87","incorrectly","the","matchstick","sam","hourglass","chichago","45","heroine"];
localStorage.setItem("local_points", 0);
const points = [20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20];
let point = 0; 
const rootmain = root; 
function validate(){ 
	let x = document.forms["decoding"]["dec"].value;
	let slide = document.querySelectorAll(".slide");
	
	// let p = head; 
	for (var j = 0; j < slide.length; j += 1){ 
		if (slide[j].classList.contains("active")){ 
			break; 
		}
	}
	var i = 0; 
	printChar(rootmain, x, i); 
	if (resD== answers[j]){ 
		alert("You are correct!");
		point += points[j];
		localStorage.setItem("local_points", point);
		slide[j].classList.add("disable_dec");
		let dec = document.querySelectorAll(".decode")[0];
        dec.disabled = true;

	}
	else{ 
		alert("You are incorrect")
	}
	resD = ""; 
}







